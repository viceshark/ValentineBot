import logging
import sqlite3

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

import database
from states import MessageState

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback-–∫–Ω–æ–ø–∫–∞
        if update.message:
            message = update.message
        elif update.callback_query:
            query = update.callback_query
            message = query.message
            await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback_query")
            return

        context.user_data.clear()

        user = message.from_user
        await message.reply_text(
            f"–ó–¥–∞—Ä–æ–≤–∞, {user.first_name}! –Ø –í–∏–∫–∏ - –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫ –∫–æ–º–∞–Ω–¥—ã Pegasus ü¶Ñü™Ω"
        )
        try:
            database.register_user(user.id, user.username)
            await message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        except sqlite3.IntegrityError:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (IntegrityError).")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        keyboard = [
            [InlineKeyboardButton("üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É", callback_data="send_valentine")],
            [InlineKeyboardButton("üåà –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –æ—Ç –∫–æ–º–∞–Ω–¥—ã", callback_data="random_valentine")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

        return MessageState.WAITING_FOR_RECEIVER

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        await message.reply_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ /start")
        return ConversationHandler.END

async def register_user(update: Update, context: CallbackContext):
    user = update.effective_user
    try:
        database.register_user(user.id, user.username)
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
    except sqlite3.IntegrityError:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (IntegrityError).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def send_start_menu(update: Update, context: CallbackContext):
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É", callback_data="send_valentine")],
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –æ—Ç –∫–æ–º–∞–Ω–¥—ã", callback_data="random_valentine")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)