import unittest
from unittest.mock import MagicMock, patch
from handlers.valentine import send_valentine_menu, choose_receiver, handle_message, handle_attached_image
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from states import MessageState

class TestValentineHandlers(unittest.TestCase):

    @patch('database.get_users')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_send_valentine_menu_with_users(self, mock_error, mock_info, mock_get_users):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_get_users.return_value = [(123456789, "user1"), (987654321, "user2")]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.callback_query = MagicMock(spec=Update.callback_query)
        update.callback_query.message = MagicMock(spec=Update.callback_query.message)
        update.callback_query.message.reply_text = MagicMock()
        update.callback_query.answer = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.user_data = {}
        context.effective_user.id = 645723579

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await send_valentine_menu(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        update.callback_query.answer.assert_called_once()
        mock_get_users.assert_called_once()
        update.callback_query.message.reply_text.assert_called_once_with(
            "–í—ã–±–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("user1", callback_data="user_123456789")],
                [InlineKeyboardButton("user2", callback_data="user_987654321")],
                [InlineKeyboardButton("–ü–µ—Ä–µ–¥—É–º–∞–ª", callback_data="cancel")]
            ])
        )
        mock_info.assert_not_called()
        mock_error.assert_not_called()
        self.assertEqual(result, MessageState.WAITING_FOR_MESSAGE)

    @patch('database.get_users')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_send_valentine_menu_no_users(self, mock_error, mock_info, mock_get_users):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_get_users.return_value = []

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.callback_query = MagicMock(spec=Update.callback_query)
        update.callback_query.message = MagicMock(spec=Update.callback_query.message)
        update.callback_query.message.reply_text = MagicMock()
        update.callback_query.answer = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.user_data = {}
        context.effective_user.id = 645723579

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await send_valentine_menu(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        update.callback_query.answer.assert_called_once()
        mock_get_users.assert_called_once()
        update.callback_query.message.reply_text.assert_called_once_with(
            "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏. –ñ–º–∏ /start"
        )
        mock_info.assert_not_called()
        mock_error.assert_not_called()
        self.assertEqual(result, ConversationHandler.END)

    @patch('database.get_users')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_choose_receiver(self, mock_error, mock_info, mock_get_users):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_get_users.return_value = [(123456789, "user1"), (987654321, "user2")]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.callback_query = MagicMock(spec=Update.callback_query)
        update.callback_query.message = MagicMock(spec=Update.callback_query.message)
        update.callback_query.message.reply_text = MagicMock()
        update.callback_query.answer = MagicMock()
        update.callback_query.data = "user_123456789"

        context = MagicMock(spec=CallbackContext)
        context.user_data = {}

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await choose_receiver(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        update.callback_query.answer.assert_called_once()
        mock_get_users.assert_not_called()
        update.callback_query.message.reply_text.assert_called_once_with(
            "ü´¶ ü´¶ ü´¶ –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ–º—É –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ—Å—É ü´¶ ü´¶ ü´¶:"
        )
        mock_info.assert_called_once_with("Receiver ID set to: 123456789")
        mock_error.assert_not_called()
        self.assertEqual(result, MessageState.WAITING_FOR_MESSAGE)

    @patch('database.get_users')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_handle_message(self, mock_error, mock_info, mock_get_users):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_get_users.return_value = [(123456789, "user1"), (987654321, "user2")]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.message = MagicMock(spec=Update.message)
        update.message.text = "–≠—Ç–æ –º–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!"
        update.message.reply_text = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.user_data = {}

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await handle_message(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        mock_get_users.assert_not_called()
        update.message.reply_text.assert_called_once_with("–ü—Ä–∏–ª–æ–∂–∏ —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–ª–∞–¥–∫–∏–π üòΩ:")
        mock_info.assert_called_once_with("Message set to: –≠—Ç–æ –º–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!")
        mock_error.assert_not_called()
        self.assertEqual(result, MessageState.WAITING_FOR_ATTACHED_IMAGE)

    @patch('database.save_valentine')
    @patch('database.get_username_by_id')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_handle_attached_image(self, mock_error, mock_info, mock_get_username_by_id, mock_save_valentine):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_save_valentine.return_value = None
        mock_get_username_by_id.return_value = "user1"

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.message = MagicMock(spec=Update.message)
        update.message.photo = [MagicMock()]
        update.message.photo[-1].file_id = "AgACAgIAAxkBAAIJT2QY..."
        update.message.reply_text = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.user_data = {
            'receiver_id': 123456789,
            'message': "–≠—Ç–æ –º–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!"
        }
        context.effective_user.id = 645723579
        context.bot = MagicMock(spec=CallbackContext.bot)
        context.bot.send_message = MagicMock()
        context.bot.send_photo = MagicMock()

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await handle_attached_image(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        update.message.reply_text.assert_called_once_with("üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ  –¢–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é! üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ")
        update.message.reply_text.assert_called_with("–ß–µ–∫–∞–π —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:")
        context.bot.send_message.assert_called_once_with(
            chat_id=123456789,
            text="üéâ –¢–µ–±–µ –ø—Ä–∏—à–ª–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!  üíû üíû üíû"
        )
        context.bot.send_photo.assert_called_once_with(
            chat_id=123456789,
            photo="AgACAgIAAxkBAAIJT2QY...",
            caption="–≠—Ç–æ –º–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!"
        )
        mock_save_valentine.assert_called_once_with(
            645723579,
            123456789,
            "–≠—Ç–æ –º–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!",
            "attached",
            "resources/user_images/AgACAgIAAxkBAAIJT2QY....jpg"
        )
        mock_info.assert_called_once_with("Valentine saved with attached image: resources/user_images/AgACAgIAAxkBAAIJT2QY....jpg")
        mock_error.assert_not_called()
        context.bot.send_message.assert_called_with(
            chat_id=update.effective_chat.id,
            text="–ü–æ–ª—É—á–∞—Ç–µ–ª—å: user1"
        )
        context.bot.send_photo.assert_called_with(
            chat_id=update.effective_chat.id,
            photo="AgACAgIAAxkBAAIJT2QY...",
            caption="–≠—Ç–æ –º–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!"
        )
        update.message.reply_text.assert_called_with("–¢—ã –±—É–ª–æ—á–∫–∞ üê∂", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–µ–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –±–æ—Å—Å!", callback_data="cancel")]
        ]))
        self.assertEqual(result, ConversationHandler.END)

    @patch('database.save_valentine')
    @patch('database.get_username_by_id')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_handle_attached_image_exception(self, mock_error, mock_info, mock_get_username_by_id, mock_save_valentine):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_save_valentine.return_value = None
        mock_get_username_by_id.return_value = "user1"

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.message = MagicMock(spec=Update.message)
        update.message.photo = [MagicMock()]
        update.message.photo[-1].file_id = "AgACAgIAAxkBAAIJT2QY..."
        update.message.reply_text = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.user_data = {
            'receiver_id': 123456789,
            'message': "–≠—Ç–æ –º–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!"
        }
        context.effective_user.id = 645723579
        context.bot = MagicMock(spec=CallbackContext.bot)
        context.bot.send_message = MagicMock(side_effect=Exception("Test Exception"))
        context.bot.send_photo = MagicMock()

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await handle_attached_image(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        update.message.reply_text.assert_has_calls([
            unittest.call("üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ  –¢–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é! üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ üíñ"),
            unittest.call("–ß–µ–∫–∞–π —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:"),
            unittest.call("–¢—ã –±—É–ª–æ—á–∫–∞ üê∂", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–µ–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –±–æ—Å—Å!", callback_data="cancel")]
            ]))
        ])
        mock_save_valentine.assert_called_once_with(
            645723579,
            123456789,
            "–≠—Ç–æ –º–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!",
            "attached",
            "resources/user_images/AgACAgIAAxkBAAIJT2QY....jpg"
        )
        mock_info.assert_called_once_with("Valentine saved with attached image: resources/user_images/AgACAgIAAxkBAAIJT2QY....jpg")
        mock_error.assert_called_once_with("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é: Test Exception")
        context.bot.send_message.assert_called_once_with(
            chat_id=123456789,
            text="üéâ –¢–µ–±–µ –ø—Ä–∏—à–ª–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!  üíû üíû üíû"
        )
        context.bot.send_photo.assert_not_called()
        context.bot.send_message.assert_called_with(
            chat_id=update.effective_chat.id,
            text="–ü–æ–ª—É—á–∞—Ç–µ–ª—å: user1"
        )
        context.bot.send_photo.assert_not_called()
        self.assertEqual(result, ConversationHandler.END)

if __name__ == "__main__":
    unittest.main()