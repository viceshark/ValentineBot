import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
)
from dotenv import load_dotenv
import os
import database
# TODO: –î–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã. –í—ã–Ω–µ—Å—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫
# TODO: –ü–æ–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á—É–≤–∞–∫–æ–≤
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
database.init_db()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class MessageState:
    WAITING_FOR_RECEIVER = 1
    WAITING_FOR_MESSAGE = 2
    WAITING_FOR_IMAGE_TYPE = 3
    WAITING_FOR_ATTACHED_IMAGE = 4
    WAITING_FOR_SELECTED_IMAGE = 5


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    await update.message.reply_text(f"üéâ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –í–∏–∫–∏ - –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫ –∫–æ–º–∞–Ω–¥—ã Pegasus.")
    await register_user(update, context)
    await send_start_menu(update, context)
    return MessageState.WAITING_FOR_RECEIVER


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(update: Update, context: CallbackContext):
    user = update.effective_user
    try:
        database.register_user(user.id, user.username)
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
    except ValueError as e:
        await update.message.reply_text(str(e))


# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
async def send_start_menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É", callback_data="send_valentine")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É"
async def send_valentine_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    current_user_id = update.effective_user.id
    users = database.get_users()
    users = [user for user in users if user[0] != current_user_id]  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–±—è

    if not users:
        await query.edit_message_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏.")
        return ConversationHandler.END

    keyboard = []
    for user in users:
        keyboard.append([InlineKeyboardButton(user[1], callback_data=f"user_{user[0]}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", reply_markup=reply_markup)
    return MessageState.WAITING_FOR_MESSAGE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
async def choose_receiver(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    receiver_id = int(query.data.split("_")[1])
    context.user_data['receiver_id'] = receiver_id
    await query.edit_message_text("ü´¶ ü´¶ ü´¶ –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ–º—É –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ—Å—É ü´¶ ü´¶ ü´¶:")
    return MessageState.WAITING_FOR_MESSAGE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏)
async def handle_message(update: Update, context: CallbackContext):
    message = update.message.text
    context.user_data['message'] = message

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="attach_image")],
        # TODO: –ü–æ—á–∏–Ω–∏—Ç—å –≤—ã–±–æ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö. –î–± –≤—ã–±–æ—Ä –∏–∑ –ª—é–±—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        # [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö", callback_data="select_image")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("  üòΩ üòΩ üòΩ –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏  üòΩ üòΩ üòΩ:", reply_markup=reply_markup)
    return MessageState.WAITING_FOR_IMAGE_TYPE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
async def choose_image_type(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    image_type = query.data
    context.user_data['image_type'] = image_type

    if image_type == "attach_image":
        await query.edit_message_text("–ü—Ä–∏–ª–æ–∂–∏ —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–ª–∞–¥–∫–∏–π üòΩ:")
        return MessageState.WAITING_FOR_ATTACHED_IMAGE
    elif image_type == "select_image":
        keyboard = [
            [InlineKeyboardButton("–ö–∞—Ä—Ç–∏–Ω–∫–∞ 1", callback_data="image_1.jpg")],
            [InlineKeyboardButton("–ö–∞—Ä—Ç–∏–Ω–∫–∞ 2", callback_data="image_2.jpg")],
            [InlineKeyboardButton("–ö–∞—Ä—Ç–∏–Ω–∫–∞ 3", callback_data="image_3.jpg")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫:", reply_markup=reply_markup)
        return MessageState.WAITING_FOR_SELECTED_IMAGE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
async def handle_attached_image(update: Update, context: CallbackContext):
    photo_file = update.message.photo[-1]
    file_path = f"user_images/{photo_file.file_id}.jpg"
    new_file = await photo_file.get_file()
    await new_file.download_to_drive(file_path)

    receiver_id = context.user_data.get('receiver_id')
    message = context.user_data.get('message')
    sender_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database.save_valentine(sender_id, receiver_id, message, "attached", file_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=receiver_id,
            text=f"üéâ –¢–µ–±–µ –ø—Ä–∏—à–ª–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!  üíû üíû üíû"
        )
        await context.bot.send_photo(
            chat_id=receiver_id,
            photo=photo_file.file_id,
            caption=message
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é: {e}")

    await update.message.reply_text("üíû üíû üíû –¢–≤–æ–µ —Å–ª–∞–¥–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é! üíû üíû üíû")
    # TODO: –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É —Ç–æ–º—É –∫—Ç–æ –µ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–º main.py:137
    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
    # await update.message.reply_text("–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É! –ú–æ–ª–æ–¥–µ—Ü! –í–æ—Ç –æ–Ω–∞:")
    # await context.bot.send_message(
    #     chat_id=update.effective_chat.id,
    #     text=f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {database.get_username_by_id(receiver_id)}"
    # )
    # await context.bot.send_message(
    #     chat_id=update.effective_chat.id,
    #     text=f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
    # )
    # await context.bot.send_photo(
    #     chat_id=update.effective_chat.id,
    #     photo=open(f"images/{image_name}", "rb"),
    #     caption="–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π!"
    # )
    await send_start_menu(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
async def handle_selected_image(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    image_name = query.data
    receiver_id = context.user_data.get('receiver_id')
    message = context.user_data.get('message')
    sender_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database.save_valentine(sender_id, receiver_id, message, "selected", image_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=receiver_id,
            text=f"üéâ –¢–µ–±–µ –ø—Ä–∏—à–ª–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞!\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
        )
        await context.bot.send_photo(
            chat_id=receiver_id,
            photo=open(f"images/{image_name}", "rb"),  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            caption="–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π!"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é: {e}")

    await send_start_menu(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: CallbackContext):

    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MessageState.WAITING_FOR_RECEIVER: [
                CallbackQueryHandler(send_valentine_menu, pattern="^send_valentine$")
            ],
            MessageState.WAITING_FOR_MESSAGE: [
                CallbackQueryHandler(choose_receiver, pattern="^user_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
            ],
            MessageState.WAITING_FOR_IMAGE_TYPE: [
                CallbackQueryHandler(choose_image_type, pattern="^(attach_image|select_image)$")
            ],
            MessageState.WAITING_FOR_ATTACHED_IMAGE: [
                MessageHandler(filters.PHOTO, handle_attached_image)
            ],
            MessageState.WAITING_FOR_SELECTED_IMAGE: [
                CallbackQueryHandler(handle_selected_image, pattern="^image_")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == "__main__":
    main()