import os
import unittest
from unittest.mock import MagicMock, patch
from handlers.random_valentine import send_random_valentine
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import CallbackContext, ConversationHandler

class TestRandomValentine(unittest.TestCase):

    @patch('os.listdir')
    @patch('random.choice')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    @patch('handlers.random_valentine.open', new_callable=MagicMock)
    async def test_send_random_valentine_with_images(self, mock_open, mock_error, mock_info, mock_random_choice, mock_os_listdir):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_os_listdir.return_value = ['image_1.jpg', 'image_2.jpg', 'image_3.jpg']
        mock_random_choice.side_effect = ['image_1.jpg', '–° –ª—é–±–æ–≤—å—é!']
        mock_file = MagicMock()
        mock_open.return_value.__enter__.return_value = mock_file

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.callback_query = MagicMock(spec=Update.callback_query)
        update.callback_query.message = MagicMock(spec=Update.callback_query.message)
        update.callback_query.message.reply_photo = MagicMock()
        update.callback_query.message.reply_text = MagicMock()
        update.callback_query.answer = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.bot = MagicMock(spec=CallbackContext.bot)

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await send_random_valentine(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        update.callback_query.answer.assert_called_once()
        mock_os_listdir.assert_called_once_with('images')
        mock_random_choice.assert_has_calls([
            unittest.call(['image_1.jpg', 'image_2.jpg', 'image_3.jpg']),
            unittest.call(['–° –ª—é–±–æ–≤—å—é!', '–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!', '–î–∞—Ä—é —Ç–µ–±–µ –ª—É—á—à–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è!', '–¢—ã –ª—É—á—à–∏–π!', '–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞...'])
        ])
        mock_open.assert_called_once_with(os.path.join('images', 'image_1.jpg'), 'rb')
        update.callback_query.message.reply_photo.assert_called_once_with(photo=InputFile(mock_file), caption='–° –ª—é–±–æ–≤—å—é!')
        update.callback_query.message.reply_text.assert_called_once_with("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")],
            [InlineKeyboardButton("–°–¥–∞—Ç—å—Å—è", callback_data="cancel")]
        ]))
        self.assertEqual(result, ConversationHandler.END)

    @patch('os.listdir')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_send_random_valentine_no_images(self, mock_error, mock_info, mock_os_listdir):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_os_listdir.return_value = []

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.callback_query = MagicMock(spec=Update.callback_query)
        update.callback_query.message = MagicMock(spec=Update.callback_query.message)
        update.callback_query.message.reply_photo = MagicMock()
        update.callback_query.message.reply_text = MagicMock()
        update.callback_query.answer = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.bot = MagicMock(spec=CallbackContext.bot)

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await send_random_valentine(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        update.callback_query.answer.assert_called_once()
        mock_os_listdir.assert_called_once_with('images')
        update.callback_query.message.reply_text.assert_called_once_with("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢")
        update.callback_query.message.reply_photo.assert_not_called()
        self.assertEqual(result, ConversationHandler.END)

    @patch('os.listdir')
    @patch('random.choice')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    @patch('handlers.random_valentine.open', side_effect=Exception("Test Exception"))
    async def test_send_random_valentine_exception(self, mock_open, mock_error, mock_info, mock_random_choice, mock_os_listdir):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_os_listdir.return_value = ['image_1.jpg', 'image_2.jpg', 'image_3.jpg']
        mock_random_choice.side_effect = ['image_1.jpg', '–° –ª—é–±–æ–≤—å—é!']

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.callback_query = MagicMock(spec=Update.callback_query)
        update.callback_query.message = MagicMock(spec=Update.callback_query.message)
        update.callback_query.message.reply_photo = MagicMock()
        update.callback_query.message.reply_text = MagicMock()
        update.callback_query.answer = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.bot = MagicMock(spec=CallbackContext.bot)

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await send_random_valentine(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        update.callback_query.answer.assert_called_once()
        mock_os_listdir.assert_called_once_with('images')
        mock_random_choice.assert_has_calls([
            unittest.call(['image_1.jpg', 'image_2.jpg', 'image_3.jpg']),
            unittest.call(['–° –ª—é–±–æ–≤—å—é!', '–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!', '–î–∞—Ä—é —Ç–µ–±–µ –ª—É—á—à–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è!', '–¢—ã –ª—É—á—à–∏–π!', '–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞...'])
        ])
        mock_open.assert_called_once_with(os.path.join('images', 'image_1.jpg'), 'rb')
        update.callback_query.message.reply_photo.assert_not_called()
        update.callback_query.message.reply_text.assert_called_once_with("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢")
        mock_error.assert_called_once_with("–û—à–∏–±–∫–∞: Test Exception")
        self.assertEqual(result, ConversationHandler.END)

if __name__ == "__main__":
    unittest.main()