import sqlite3
import unittest
from unittest.mock import MagicMock, patch
from handlers.start import start, send_start_menu
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from states import MessageState
import database

class TestStartHandlers(unittest.TestCase):

    @patch('database.register_user')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_start_with_new_user(self, mock_error, mock_info, mock_register_user):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_register_user.return_value = None  # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.message = MagicMock(spec=Update.message)
        update.message.from_user = MagicMock(spec=Update.message.from_user)
        update.message.from_user.first_name = "Kobe"
        update.message.from_user.id = 645723579
        update.message.from_user.username = "kobe1"
        update.message.reply_text = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.user_data = {'some_key': 'some_value'}

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await start(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data.clear.assert_called_once()
        update.message.reply_text.assert_has_calls([
            unittest.call("–ó–¥–∞—Ä–æ–≤–∞, Kobe! –Ø –í–∏–∫–∏ - –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫ –∫–æ–º–∞–Ω–¥—ã Pegasus ü¶Ñü™Ω"),
            unittest.call("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        ])
        mock_register_user.assert_called_once_with(645723579, "kobe1")
        mock_info.assert_not_called()
        mock_error.assert_not_called()
        update.message.reply_text.assert_called_with("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É", callback_data="send_valentine")],
            [InlineKeyboardButton("üåà –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –æ—Ç –∫–æ–º–∞–Ω–¥—ã", callback_data="random_valentine")]
        ]))
        self.assertEqual(result, MessageState.WAITING_FOR_RECEIVER)

    @patch('database.register_user')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_start_with_existing_user(self, mock_error, mock_info, mock_register_user):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_register_user.side_effect = sqlite3.IntegrityError("User already exists")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.message = MagicMock(spec=Update.message)
        update.message.from_user = MagicMock(spec=Update.message.from_user)
        update.message.from_user.first_name = "Kobe"
        update.message.from_user.id = 645723579
        update.message.from_user.username = "kobe1"
        update.message.reply_text = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.user_data = {'some_key': 'some_value'}

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await start(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data.clear.assert_called_once()
        update.message.reply_text.assert_has_calls([
            unittest.call("–ó–¥–∞—Ä–æ–≤–∞, Kobe! –Ø –í–∏–∫–∏ - –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫ –∫–æ–º–∞–Ω–¥—ã Pegasus ü¶Ñü™Ω"),
        ])
        mock_register_user.assert_called_once_with(645723579, "kobe1")
        mock_info.assert_called_once_with("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å kobe1 —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (IntegrityError).")
        mock_error.assert_not_called()
        update.message.reply_text.assert_called_with("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É", callback_data="send_valentine")],
            [InlineKeyboardButton("üåà –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –æ—Ç –∫–æ–º–∞–Ω–¥—ã", callback_data="random_valentine")]
        ]))
        self.assertEqual(result, MessageState.WAITING_FOR_RECEIVER)

    @patch('database.register_user')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_start_with_exception(self, mock_error, mock_info, mock_register_user):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_register_user.side_effect = Exception("Test Exception")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.message = MagicMock(spec=Update.message)
        update.message.from_user = MagicMock(spec=Update.message.from_user)
        update.message.from_user.first_name = "Kobe"
        update.message.from_user.id = 645723579
        update.message.from_user.username = "kobe1"
        update.message.reply_text = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.user_data = {'some_key': 'some_value'}

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await start(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data.clear.assert_called_once()
        update.message.reply_text.assert_has_calls([
            unittest.call("–ó–¥–∞—Ä–æ–≤–∞, Kobe! –Ø –í–∏–∫–∏ - –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫ –∫–æ–º–∞–Ω–¥—ã Pegasus ü¶Ñü™Ω"),
            unittest.call("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ /start")
        ])
        mock_register_user.assert_called_once_with(645723579, "kobe1")
        mock_info.assert_not_called()
        mock_error.assert_called_once_with("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /start: Test Exception")
        self.assertEqual(result, ConversationHandler.END)

    @patch('database.register_user')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_start_with_callback_query(self, mock_error, mock_info, mock_register_user):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤
        mock_register_user.return_value = None  # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.callback_query = MagicMock(spec=Update.callback_query)
        update.callback_query.message = MagicMock(spec=Update.callback_query.message)
        update.callback_query.message.from_user = MagicMock(spec=Update.callback_query.message.from_user)
        update.callback_query.message.from_user.first_name = "Kobe"
        update.callback_query.message.from_user.id = 645723579
        update.callback_query.message.from_user.username = "kobe1"
        update.callback_query.message.reply_text = MagicMock()
        update.callback_query.answer = MagicMock()

        context = MagicMock(spec=CallbackContext)
        context.user_data = {'some_key': 'some_value'}

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await start(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data.clear.assert_called_once()
        update.callback_query.message.reply_text.assert_has_calls([
            unittest.call("–ó–¥–∞—Ä–æ–≤–∞, Kobe! –Ø –í–∏–∫–∏ - –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–æ–∫ –∫–æ–º–∞–Ω–¥—ã Pegasus ü¶Ñü™Ω"),
            unittest.call("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        ])
        mock_register_user.assert_called_once_with(645723579, "kobe1")
        mock_info.assert_not_called()
        mock_error.assert_not_called()
        update.callback_query.message.reply_text.assert_called_with("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É", callback_data="send_valentine")],
            [InlineKeyboardButton("üåà –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –æ—Ç –∫–æ–º–∞–Ω–¥—ã", callback_data="random_valentine")]
        ]))
        update.callback_query.answer.assert_called_once()
        self.assertEqual(result, MessageState.WAITING_FOR_RECEIVER)

    @patch('database.register_user')
    @patch('logging.Logger.info')
    @patch('logging.Logger.error')
    async def test_start_without_message_or_callback_query(self, mock_error, mock_info, mock_register_user):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Update –∏ CallbackContext
        update = MagicMock(spec=Update)
        update.message = None
        update.callback_query = None

        context = MagicMock(spec=CallbackContext)
        context.user_data = {'some_key': 'some_value'}

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        result = await start(update, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data.clear.assert_not_called()
        mock_register_user.assert_not_called()
        mock_info.assert_not_called()
        mock_error.assert_called_once_with("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback_query")
        self.assertIsNone(result)